%% RUBY_AXIS writes the given set of axis to the given file
%   RUBY_AXIS(file, P, R) takes a 'file' opened with RUBY_CREATE, the
%   origin P and the orthoganal matrix R (R * R' = R' * R = eye(3))
%   defining the three axis.
%
%   RUBY_AXIS(..., 'name', NAME) NAME is a string label of the axis.
%
%   Examples:
%       file = ruby_create()                  % Open and prepare file
%       ruby_axis(file, [4, 4,       4],...
%                       [1, 0,       0;...
%                        0, cos(1),  sin(1);...
%                        0, -sin(1), cos(1)]) % Draw rotated axis at 4,4,4
%       ruby_axis(file, [4, 4,       4],...
%                       [1, 0,       0;...
%                        0, cos(1),  sin(1);...
%                        0, -sin(1), cos(1)],...
%                        'name',...
%                        string('Origin2'))   % With label
%       ruby_close(file);                     % Close file (mandatory)
%
%   See also RUBY_CREATE, RUBY_CLOSE.

%Copyright 2019 TOPO EPFL
%
%Permission is hereby granted, free of charge, to any person obtaining a 
%copy of this software and associated documentation files (the "Software"),
%to deal in the Software without restriction, including without limitation
%the rights to use, copy, modify, merge, publish, distribute, sublicense,
%and/or sell copies of the Software, and to permit persons to whom the
%Software is furnished to do so, subject to the following conditions:
%
%The above copyright notice and this permission notice shall be included in
%all copies or substantial portions of the Software.
%
%THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
%THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
%FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%DEALINGS IN THE SOFTWARE.
function [] = ruby_axis(file, P, R, varargin)
%% load constants
    ruby_params;

    parser = inputParser;

    checkP = @(x) (isnumeric(x) && size(x, 1) == 1 && size(x, 2) == 3);

    checkR = @(x) (isnumeric(x) && size(x, 1) == 3 && size(x, 2) == 3 && all(all(round(x'*x) == round(x*x'))));

    addRequired(parser, 'file_id');
    addRequired(parser, 'P', checkP);
    addRequired(parser, 'R', checkR);
    addParameter(parser, 'name', defaultName, checkName);

    parse(parser, file, P, R, varargin{:});

    file_id = file.id;

    P = parser.Results.P;
    R = parser.Results.R;

    P = P * SCALE_FACTOR;
    R = R * SCALE_FACTOR;

    ex = R(:, 1);
    ey = R(:, 2);
    ez = R(:, 3);

    axis_name = parser.Results.name;

    fwrite(file_id, 'group = Sketchup.active_model.entities.add_group');
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1)), ',',...
        num2str(P(2)), ',',...
        num2str(P(3)), '],[',...
        num2str(P(1) + ex(1)), ',',...
        num2str(P(2) + ex(2)), ',',...
        num2str(P(3) + ex(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1)), ',',...
        num2str(P(2)), ',',...
        num2str(P(3)), '],[',...
        num2str(P(1) + ey(1)), ',',...
        num2str(P(2) + ey(2)), ',',...
        num2str(P(3) + ey(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1)), ',',...
        num2str(P(2)), ',',...
        num2str(P(3)), '],[',...
        num2str(P(1) + ez(1)), ',',...
        num2str(P(2) + ez(2)), ',',...
        num2str(P(3) + ez(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1) + 0.9 * ez(1) + 0.1 * ex(1)), ',',...
        num2str(P(2) + 0.9 * ez(2) + 0.1 * ex(2)), ',',...
        num2str(P(3) + 0.9 * ez(3) + 0.1 * ex(3)), '],[',...
        num2str(P(1) + ez(1)), ',',...
        num2str(P(2) + ez(2)), ',',...
        num2str(P(3) + ez(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1) + 0.9 * ez(1) - 0.1 * ex(1)), ',',...
        num2str(P(2) + 0.9 * ez(2) - 0.1 * ex(2)), ',',...
        num2str(P(3) + 0.9 * ez(3) - 0.1 * ex(3)), '],[',...
        num2str(P(1) + ez(1)), ',',...
        num2str(P(2) + ez(2)), ',',...
        num2str(P(3) + ez(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1) + 0.9 * ey(1) + 0.1 * ex(1)), ',',...
        num2str(P(2) + 0.9 * ey(2) + 0.1 * ex(2)), ',',...
        num2str(P(3) + 0.9 * ey(3) + 0.1 * ex(3)), '],[',...
        num2str(P(1) + ey(1)), ',',...
        num2str(P(2) + ey(2)), ',',...
        num2str(P(3) + ey(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1) + 0.9 * ey(1) - 0.1 * ex(1)), ',',...
        num2str(P(2) + 0.9 * ey(2) - 0.1 * ex(2)), ',',...
        num2str(P(3) + 0.9 * ey(3) - 0.1 * ex(3)), '],[',...
        num2str(P(1) + ey(1)), ',',...
        num2str(P(2) + ey(2)), ',',...
        num2str(P(3) + ey(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1) + 0.9 * ex(1) + 0.1 * ey(1)), ',',...
        num2str(P(2) + 0.9 * ex(2) + 0.1 * ey(2)), ',',...
        num2str(P(3) + 0.9 * ex(3) + 0.1 * ey(3)), '],[',...
        num2str(P(1) + ex(1)), ',',...
        num2str(P(2) + ex(2)), ',',...
        num2str(P(3) + ex(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.entities.add_line([',...
        num2str(P(1) + 0.9 * ex(1) - 0.1 * ey(1)), ',',...
        num2str(P(2) + 0.9 * ex(2) - 0.1 * ey(2)), ',',...
        num2str(P(3) + 0.9 * ex(3) - 0.1 * ey(3)), '],[',...
        num2str(P(1) + ex(1)), ',',...
        num2str(P(2) + ex(2)), ',',...
        num2str(P(3) + ex(3)), '])']);
    ruby_newline(file_id);

    fwrite(file_id, ['group.name =', char(39), char(axis_name), char(39)]);
    ruby_newline(file_id);

    fwrite(file_id, ['t1 = group.entities.add_text("x", [',...
        num2str(P(1) + ex(1)), ',',...
        num2str(P(2) + ex(2)), ',',...
        num2str(P(3) + ex(3)), '],[0,0,0])']);
    ruby_newline(file_id);

    fwrite(file_id, ['t2 = group.entities.add_text("y", [',...
        num2str(P(1) + ey(1)), ',',...
        num2str(P(2) + ey(2)), ',',...
        num2str(P(3) + ey(3)), '],[0,0,0])']);
    ruby_newline(file_id);

    fwrite(file_id, ['t3 = group.entities.add_text("z", [',...
        num2str(P(1) + ez(1)), ',',...
        num2str(P(2) + ez(2)), ',',...
        num2str(P(3) + ez(3)), '], [0, 0, 0])']);
    ruby_newline(file_id);
end
